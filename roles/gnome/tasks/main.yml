---
- name: add gnome packages
  apt: name="{{ packages }}" state=latest update_cache=true force=yes
  vars:
    packages: "{{ gnome_packages }}"
  tags:
    - gnome

- name: check if gnome user theme extension is installed
  become: no
  command: gnome-extensions list
  register: gnome_user_theme_installed
  failed_when: False
  tags:
    - gnome

- name: Download gnome user theme extension
  become: no
  get_url: url="https://extensions.gnome.org/extension-data/user-themegnome-shell-extensions.gcampax.github.com.v38.shell-extension.zip" dest=/tmp/user-themegnome-shell-extensions.gcampax.github.com.v38.shell-extension.zip
  when: gnome_user_theme_installed.stdout.find('user-theme@gnome-shell-extensions.gcampax.github.com') == -1
  tags:
    - gnome

- name: Install and enable gnome user theme extension
  become: no
  shell: >
    gnome-extensions install --force /tmp/user-themegnome-shell-extensions.gcampax.github.com.v38.shell-extension.zip && gnome-extensions enable user-theme@gnome-shell-extensions.gcampax.github.com
  when: gnome_user_theme_installed.stdout.find('user-theme@gnome-shell-extensions.gcampax.github.com') == -1
  tags:
    - gnome

- name: Remove gnome user theme extension zip
  become: no
  file: path=/tmp/user-themegnome-shell-extensions.gcampax.github.com.v38.shell-extension.zip state=absent
  when: gnome_user_theme_installed.stdout.find('user-theme@gnome-shell-extensions.gcampax.github.com') == -1
  tags:
    - gnome

- name: Deploy wallpapers
  copy: src="{{ item }}" dest="{{ lookup('env','HOME') }}/Pictures/wallpapers/{{ item }}"
  with_items:
    - "{{ gnome_wallpaper_lock_screen }}"
    - "{{ gnome_wallpaper_desktop_screen }}"

- name: Enable gnome extensions
  become: no
  shell: "gnome-extensions enable {{ item }}"
  with_items: "{{ gnome_extensions }}"
  tags:
    - gnome

- name: Apply gnome settings
  become: no
  shell: >
    gsettings set {{ item.schema }} {{ item.key }} "{{ item.value }}"
  with_items: "{{ gnome_settings }}"
  tags:
    - gnome

- name: Apply gnome settings with schemadir
  become: no
  shell: >
    gsettings --schemadir {{ item.schemadir }} set {{ item.schema }} {{ item.key }} "{{ item.value }}"
  with_items: "{{ gnome_settings_with_schemadir }}"
  tags:
    - gnome

- name: Change login page to Arc-Dark
  alternatives:
    name: gdm3.css
    link: /usr/share/gnome-shell/theme/gdm3.css
    path: /usr/share/themes/Arc-Dark/gnome-shell/gnome-shell.css
  tags:
    - gnome

# - name: Change lock screen to Arc-Dark - check if already done
#   stat: path=/usr/share/gnome-shell/theme/Yaru.back
#   register: gnome_lock_screen_theme_yaru_backup_directory
#   tags:
#     - gnome

# - name: Change lock screen to Arc-Dark - Backup Yaru folder
#   command: mv /usr/share/gnome-shell/theme/Yaru /usr/share/gnome-shell/theme/Yaru.back
#   when: not gnome_lock_screen_theme_yaru_backup_directory.stat.exists
#   tags:
#     - gnome

# - name: Change lock screen to Arc-Dark - enable Arc-Dark
#   file:
#     src: /usr/share/themes/Arc-Dark/gnome-shell/
#     dest: /usr/share/gnome-shell/theme/Yaru
#     state: link
#   when: not gnome_lock_screen_theme_yaru_backup_directory.stat.exists
#   tags:
#     - gnome

- name: Change grub background to black - config file
  lineinfile:
    path: /usr/share/plymouth/themes/default.grub
    regexp: '^if background_color'
    line: if background_color 0,0,0,0; then
  tags:
    - gnome

- name: Change grub background to black - update-grub
  shell: "update-grub"
  tags:
    - gnome

- name: Change plymouth background to black - config file
  lineinfile:
    path: /usr/share/plymouth/themes/ubuntu-logo/ubuntu-logo.script
    regexp: "^{{ item }}"
    line: "{{ item }} (0.0, 0.0, 0.0);"
  with_items:
    - "Window.SetBackgroundTopColor"
    - "Window.SetBackgroundBottomColor"
  tags:
    - gnome

- name: Change plymouth background to black - update-initramfs
  shell: "update-initramfs -u"
  tags:
    - gnome

- name: add application launcher
  become: no
  template: src=launcher.j2
            dest={{ lookup('env','HOME') }}/.local/share/applications/{{ item.key }}.desktop
  with_dict: "{{ gnome_launchers }}"
  tags:
    - gnome
  
- name: dconf configuration
  become: no
  dconf: user={{ ansible_ssh_user }}
         key="{{ item.value.key }}"
         value="{{ item.value.value }}"
  with_dict: "{{ gnome_dconfs }}"
  tags:
    - gnome
